{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "17996050",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test_change_password (__main__.TestAccount) ... ok\n",
      "test_create_account (__main__.TestAccount) ... ok\n",
      "test_create_customer (__main__.TestCustomer) ... ok\n",
      "test_update_contact_info (__main__.TestCustomer) ... ok\n",
      "test_create_ebook (__main__.TestEbook) ... ok\n",
      "test_is_available (__main__.TestEbook) ... ok\n",
      "test_update_price (__main__.TestEbook) ... ok\n",
      "test_update_stock (__main__.TestEbook) ... ok\n",
      "test_apply_discount_to_order (__main__.TestOrder) ... FAIL\n",
      "test_create_order (__main__.TestOrder) ... ok\n",
      "test_add_item (__main__.TestShoppingCart) ... ok\n",
      "test_apply_discount (__main__.TestShoppingCart) ... FAIL\n",
      "test_empty_cart (__main__.TestShoppingCart) ... ok\n",
      "test_remove_item (__main__.TestShoppingCart) ... ok\n",
      "\n",
      "======================================================================\n",
      "FAIL: test_apply_discount_to_order (__main__.TestOrder)\n",
      "----------------------------------------------------------------------\n",
      "Traceback (most recent call last):\n",
      "  File \"/var/folders/c3/3_qdd7zn5b9cyv38c0fb5fxh0000gp/T/ipykernel_2657/1172558664.py\", line 230, in test_apply_discount_to_order\n",
      "    self.assertEqual(order.calculate_total(), 8.0)\n",
      "AssertionError: 10.0 != 8.0\n",
      "\n",
      "======================================================================\n",
      "FAIL: test_apply_discount (__main__.TestShoppingCart)\n",
      "----------------------------------------------------------------------\n",
      "Traceback (most recent call last):\n",
      "  File \"/var/folders/c3/3_qdd7zn5b9cyv38c0fb5fxh0000gp/T/ipykernel_2657/1172558664.py\", line 209, in test_apply_discount\n",
      "    self.assertEqual(cart.get_total_price(), 15.0)\n",
      "AssertionError: 20.0 != 15.0\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 14 tests in 0.033s\n",
      "\n",
      "FAILED (failures=2)\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "\n",
    "class Ebook:\n",
    "    \"\"\"\n",
    "    Represents an Ebook with basic information and operations.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, title, author, publication_date, genre, price, isbn, stock_quantity):\n",
    "        self.__title = title\n",
    "        self.__author = author\n",
    "        self.__publication_date = publication_date\n",
    "        self.__genre = genre\n",
    "        self.__price = price\n",
    "        self.__isbn = isbn\n",
    "        self.__stock_quantity = stock_quantity\n",
    "\n",
    "    def get_title(self):\n",
    "        return self.__title\n",
    "\n",
    "    def get_author(self):\n",
    "        return self.__author\n",
    "\n",
    "    def get_price(self):\n",
    "        return self.__price\n",
    "\n",
    "    def get_stock_quantity(self):\n",
    "        return self.__stock_quantity\n",
    "\n",
    "    def update_price(self, new_price):\n",
    "        self.__price = new_price\n",
    "\n",
    "    def update_stock(self, new_stock):\n",
    "        self.__stock_quantity = new_stock\n",
    "\n",
    "    def is_available(self):\n",
    "        return self.__stock_quantity > 0\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Ebook(title={self.__title}, author={self.__author}, price={self.__price})\"\n",
    "\n",
    "\n",
    "class ShoppingCart:\n",
    "    \"\"\"\n",
    "    Represents a shopping cart that holds Ebooks.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, cart_id):\n",
    "        self.__cart_id = cart_id\n",
    "        self.__items = []\n",
    "        self.__cart_total = 0.0\n",
    "\n",
    "    def add_item(self, book):\n",
    "        self.__items.append(book)\n",
    "        self.__update_cart_total()\n",
    "\n",
    "    def remove_item(self, book):\n",
    "        if book in self.__items:\n",
    "            self.__items.remove(book)\n",
    "            self.__update_cart_total()\n",
    "\n",
    "    def get_total_price(self):\n",
    "        return sum(item.get_price() for item in self.__items)\n",
    "\n",
    "    def apply_discount(self, discount):\n",
    "        self.__cart_total -= discount\n",
    "\n",
    "    def empty_cart(self):\n",
    "        self.__items.clear()\n",
    "        self.__cart_total = 0.0\n",
    "\n",
    "    def __update_cart_total(self):\n",
    "        self.__cart_total = self.get_total_price()\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"ShoppingCart(id={self.__cart_id}, total={self.__cart_total})\"\n",
    "\n",
    "\n",
    "class Order:\n",
    "    \"\"\"\n",
    "    Represents an order with details about the customer and items.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, order_id, order_date, customer, order_items):\n",
    "        self.__order_id = order_id\n",
    "        self.__order_date = order_date\n",
    "        self.__customer = customer\n",
    "        self.__order_items = order_items\n",
    "        self.__total_amount = self.calculate_total()\n",
    "\n",
    "    def calculate_total(self):\n",
    "        return sum(item.get_price() for item in self.__order_items)\n",
    "\n",
    "    def apply_discount(self, discount):\n",
    "        self.__total_amount -= discount\n",
    "\n",
    "    def finalize_order(self):\n",
    "        # Finalize order logic placeholder\n",
    "        pass\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Order(id={self.__order_id}, total={self.__total_amount})\"\n",
    "\n",
    "\n",
    "class Account:\n",
    "    \"\"\"\n",
    "    Represents an account with login credentials and basic account information.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, account_id, username, password, account_creation_date):\n",
    "        self.__account_id = account_id\n",
    "        self.__username = username\n",
    "        self.__password = password\n",
    "        self.__account_creation_date = account_creation_date\n",
    "\n",
    "    def get_account_details(self):\n",
    "        return f\"Account ID: {self.__account_id}, Username: {self.__username}\"\n",
    "\n",
    "    def change_password(self, new_password):\n",
    "        self.__password = new_password\n",
    "\n",
    "    def validate_login(self, password):\n",
    "        return self.__password == password\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Account(id={self.__account_id}, username={self.__username})\"\n",
    "\n",
    "\n",
    "class Customer:\n",
    "    \"\"\"\n",
    "    Represents a customer with personal information and loyalty program status.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, customer_id, name, email, address, phone, loyalty_member):\n",
    "        self.__customer_id = customer_id\n",
    "        self.__name = name\n",
    "        self.__email = email\n",
    "        self.__address = address\n",
    "        self.__phone = phone\n",
    "        self.__loyalty_member = loyalty_member\n",
    "\n",
    "    def get_customer_details(self):\n",
    "        return f\"Customer ID: {self.__customer_id}, Name: {self.__name}\"\n",
    "\n",
    "    def update_contact_info(self, email=None, address=None, phone=None):\n",
    "        if email:\n",
    "            self.__email = email\n",
    "        if address:\n",
    "            self.__address = address\n",
    "        if phone:\n",
    "            self.__phone = phone\n",
    "\n",
    "    def add_to_loyalty_program(self):\n",
    "        self.__loyalty_member = True\n",
    "\n",
    "    def remove_from_loyalty_program(self):\n",
    "        self.__loyalty_member = False\n",
    "\n",
    "    def is_loyalty_member(self):\n",
    "        return self.__loyalty_member\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Customer(id={self.__customer_id}, name={self.__name})\"\n",
    "    \n",
    "    import unittest\n",
    "\n",
    "class TestEbook(unittest.TestCase):\n",
    "    def test_create_ebook(self):\n",
    "        book = Ebook(\"Test Book\", \"Author\", \"2024-01-01\", \"Fiction\", 9.99, \"1234567890\", 10)\n",
    "        self.assertEqual(book.get_title(), \"Test Book\")\n",
    "        self.assertEqual(book.get_author(), \"Author\")\n",
    "        self.assertEqual(book.get_price(), 9.99)\n",
    "        self.assertEqual(book.get_stock_quantity(), 10)\n",
    "    \n",
    "    def test_update_price(self):\n",
    "        book = Ebook(\"Test Book\", \"Author\", \"2024-01-01\", \"Fiction\", 9.99, \"1234567890\", 10)\n",
    "        book.update_price(15.99)\n",
    "        self.assertEqual(book.get_price(), 15.99)\n",
    "    \n",
    "    def test_update_stock(self):\n",
    "        book = Ebook(\"Test Book\", \"Author\", \"2024-01-01\", \"Fiction\", 9.99, \"1234567890\", 10)\n",
    "        book.update_stock(5)\n",
    "        self.assertEqual(book.get_stock_quantity(), 5)\n",
    "    \n",
    "    def test_is_available(self):\n",
    "        book = Ebook(\"Test Book\", \"Author\", \"2024-01-01\", \"Fiction\", 9.99, \"1234567890\", 1)\n",
    "        self.assertTrue(book.is_available())\n",
    "        book.update_stock(0)\n",
    "        self.assertFalse(book.is_available())\n",
    "\n",
    "class TestShoppingCart(unittest.TestCase):\n",
    "    def test_add_item(self):\n",
    "        cart = ShoppingCart(\"cart_001\")\n",
    "        book = Ebook(\"Test Book\", \"Author\", \"2024-01-01\", \"Fiction\", 9.99, \"1234567890\", 10)\n",
    "        cart.add_item(book)\n",
    "        self.assertEqual(cart.get_total_price(), 9.99)\n",
    "    \n",
    "    def test_remove_item(self):\n",
    "        cart = ShoppingCart(\"cart_001\")\n",
    "        book = Ebook(\"Test Book\", \"Author\", \"2024-01-01\", \"Fiction\", 9.99, \"1234567890\", 10)\n",
    "        cart.add_item(book)\n",
    "        cart.remove_item(book)\n",
    "        self.assertEqual(cart.get_total_price(), 0)\n",
    "    \n",
    "    def test_apply_discount(self):\n",
    "        cart = ShoppingCart(\"cart_001\")\n",
    "        book = Ebook(\"Test Book\", \"Author\", \"2024-01-01\", \"Fiction\", 20.0, \"1234567890\", 10)\n",
    "        cart.add_item(book)\n",
    "        cart.apply_discount(5.0)\n",
    "        self.assertEqual(cart.get_total_price(), 15.0)\n",
    "    \n",
    "    def test_empty_cart(self):\n",
    "        cart = ShoppingCart(\"cart_001\")\n",
    "        book = Ebook(\"Test Book\", \"Author\", \"2024-01-01\", \"Fiction\", 9.99, \"1234567890\", 10)\n",
    "        cart.add_item(book)\n",
    "        cart.empty_cart()\n",
    "        self.assertEqual(cart.get_total_price(), 0)\n",
    "        self.assertEqual(len(cart._ShoppingCart__items), 0)\n",
    "\n",
    "class TestOrder(unittest.TestCase):\n",
    "    def test_create_order(self):\n",
    "        book1 = Ebook(\"Book One\", \"Author A\", \"2024-01-01\", \"Fiction\", 10.0, \"1234567890\", 5)\n",
    "        book2 = Ebook(\"Book Two\", \"Author B\", \"2024-02-01\", \"Non-Fiction\", 15.0, \"0987654321\", 3)\n",
    "        order = Order(\"order_001\", \"2024-11-04\", \"customer_001\", [book1, book2])\n",
    "        self.assertEqual(order.calculate_total(), 25.0)\n",
    "    \n",
    "    def test_apply_discount_to_order(self):\n",
    "        book1 = Ebook(\"Book One\", \"Author A\", \"2024-01-01\", \"Fiction\", 10.0, \"1234567890\", 5)\n",
    "        order = Order(\"order_001\", \"2024-11-04\", \"customer_001\", [book1])\n",
    "        order.apply_discount(2.0)\n",
    "        self.assertEqual(order.calculate_total(), 8.0)\n",
    "\n",
    "class TestAccount(unittest.TestCase):\n",
    "    def test_create_account(self):\n",
    "        account = Account(\"acc_001\", \"user1\", \"pass123\", \"2024-01-01\")\n",
    "        self.assertEqual(account.get_account_details(), \"Account ID: acc_001, Username: user1\")\n",
    "    \n",
    "    def test_change_password(self):\n",
    "        account = Account(\"acc_001\", \"user1\", \"pass123\", \"2024-01-01\")\n",
    "        account.change_password(\"newpass456\")\n",
    "        self.assertTrue(account.validate_login(\"newpass456\"))\n",
    "\n",
    "class TestCustomer(unittest.TestCase):\n",
    "    def test_create_customer(self):\n",
    "        customer = Customer(\"cust_001\", \"Ahmed Hattawi\", \"Ahmed@example.com\", \"123 Street\", \"555-1234\", False)\n",
    "        self.assertEqual(customer.get_customer_details(), \"Customer ID: cust_001, Name: Ahmed Hattawi\")\n",
    "    \n",
    "    def test_update_contact_info(self):\n",
    "        customer = Customer(\"cust_001\", \"Ahmed Hattawi\", \"Ahmed@example.com\", \"123 Street\", \"555-1234\", False)\n",
    "        customer.update_contact_info(email=\"Ahmed.h@newmail.com\", address=\"456 Avenue\")\n",
    "        self.assertEqual(customer.get_customer_details(), \"Customer ID: cust_001, Name: Ahmed Hattawi\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    unittest.main(argv=[''], verbosity=2, exit=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b704e02e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
